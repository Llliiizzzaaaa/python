{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\n\nconst useWindowSize = () => {\n  _s();\n\n  // в данном пользовательском хуке мы используем хук состояния и хук эффекта\n  const [windowSize, setWindowSize] = useState({\n    width: undefined,\n    height: undefined\n  });\n  useEffect(() => {\n    // при вызове этой функции, мы будем \"класть\" в состояние актуальную высоту и ширирну экрана\n    function handleResize() {\n      setWindowSize({\n        width: window.innerWidth,\n        height: window.innerHeight\n      });\n    } // В данном примере мы будет подписываться на изменение размеров экрана, чтобы всегда иметь актуальные данные\n\n\n    window.addEventListener(\"resize\", handleResize);\n    handleResize(); // После того, как компонент \"уничтожается\", желательно избавиться от всех \"слушателей\", чтобы не тратить ресурсы браузера\n\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, []);\n  return windowSize;\n};\n\n_s(useWindowSize, \"Lx6dFCJt7Ze4WyzsCH5RzM+GN9Y=\");\n\nexport default useWindowSize;","map":{"version":3,"sources":["A:/sasha/YandexDisk/МГТУ/7-й семестр/РИП/ЛР/JS/lab8/src/utils/useWindowSize.js"],"names":["useEffect","useState","useWindowSize","windowSize","setWindowSize","width","undefined","height","handleResize","window","innerWidth","innerHeight","addEventListener","removeEventListener"],"mappings":";;AAAA,SAAQA,SAAR,EAAmBC,QAAnB,QAAkC,OAAlC;;AAEA,MAAMC,aAAa,GAAG,MAAM;AAAA;;AACxB;AACA,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BH,QAAQ,CAAC;AACzCI,IAAAA,KAAK,EAAEC,SADkC;AAEzCC,IAAAA,MAAM,EAAED;AAFiC,GAAD,CAA5C;AAIAN,EAAAA,SAAS,CAAC,MAAM;AACZ;AACA,aAASQ,YAAT,GAAwB;AACpBJ,MAAAA,aAAa,CAAC;AACVC,QAAAA,KAAK,EAAEI,MAAM,CAACC,UADJ;AAEVH,QAAAA,MAAM,EAAEE,MAAM,CAACE;AAFL,OAAD,CAAb;AAIH,KAPW,CASZ;;;AACAF,IAAAA,MAAM,CAACG,gBAAP,CAAwB,QAAxB,EAAkCJ,YAAlC;AACAA,IAAAA,YAAY,GAXA,CAYZ;;AACA,WAAO,MAAMC,MAAM,CAACI,mBAAP,CAA2B,QAA3B,EAAqCL,YAArC,CAAb;AACH,GAdQ,EAcN,EAdM,CAAT;AAgBA,SAAOL,UAAP;AACH,CAvBD;;GAAMD,a;;AAyBN,eAAeA,aAAf","sourcesContent":["import {useEffect, useState} from 'react';\n\nconst useWindowSize = () => {\n    // в данном пользовательском хуке мы используем хук состояния и хук эффекта\n    const [windowSize, setWindowSize] = useState({\n        width: undefined,\n        height: undefined,\n    });\n    useEffect(() => {\n        // при вызове этой функции, мы будем \"класть\" в состояние актуальную высоту и ширирну экрана\n        function handleResize() {\n            setWindowSize({\n                width: window.innerWidth,\n                height: window.innerHeight,\n            });\n        }\n\n        // В данном примере мы будет подписываться на изменение размеров экрана, чтобы всегда иметь актуальные данные\n        window.addEventListener(\"resize\", handleResize);\n        handleResize();\n        // После того, как компонент \"уничтожается\", желательно избавиться от всех \"слушателей\", чтобы не тратить ресурсы браузера\n        return () => window.removeEventListener(\"resize\", handleResize);\n    }, []);\n\n    return windowSize;\n}\n\nexport default useWindowSize;"]},"metadata":{},"sourceType":"module"}